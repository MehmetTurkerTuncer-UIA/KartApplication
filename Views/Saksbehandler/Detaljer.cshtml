@model KartApplication.Models.SakModel

@{
    ViewData["Title"] = "Saksbehandler Sayfası";
    Layout = "~/Views/Shared/_SaksbehandlerLayout.cshtml";
}

<!-- Sak Detayları Tablosu -->
<table class="tableForDetaljer">
    <thead>
        <tr>
            <th>Tarih</th>
            <th>Sak Status</th>
            <th>Referans Numarası</th>
            <th>Kontroll Status</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@Model.CreatedAt.ToShortDateString()</td>
            <td>@Model.Status</td>
            <td>@Model.Id</td>
            <td>@Model.ArbeidStatus</td>
        </tr>
    </tbody>
</table>
<br>

@if (!string.IsNullOrEmpty(Model.Description))
{
    <div class="OppsummeringBox">
        <div class="OppsummeringContentTitle">
            <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Beskrivelse:
        </div>
        <p class="OppsummeringContent">@Model.Description</p>
    </div>
}

@if (!string.IsNullOrEmpty(Model.Address))
{
    <div class="OppsummeringBox">
        <div class="OppsummeringContentTitle">
            <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Adresse:
        </div>
        <p class="OppsummeringContent">@Model.Address</p>
    </div>
}

<!-- Harita konteyneri -->
<div class="OppsummeringBox">
    <div class="OppsummeringContentTitle">
        <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Kart:
    </div>
    <div id="map" style="height: 400px; width: 100%;"></div>
</div>

<!-- Koordinatlar tablosu -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>#</th>
            <th>Breddegrad</th>
            <th>Lengdegrad</th>
        </tr>
    </thead>
    <tbody id="coordinatesTableBody">
        <!-- Koordinatlar burada doldurulacak -->
    </tbody>
</table>

<!-- Yönetim Paneli -->
<div class="admin-panel">
    <div class="admin-card">
        <h2>Administer saken</h2>
        <form method="post" asp-action="UpdateStatus" asp-controller="Saksbehandler" asp-route-id="@Model.Id">
            <div class="form-group">
                <label for="sakStatus">Sak Status</label>
                <select id="sakStatus" name="sakStatus" class="form-control">
                    <option value="">Velg</option>
                    @if (Model.Status == SakStatus.SakMottatt)
                    {
                        <option value="SakMottatt" selected>Sak Mottatt</option>
                    }
                    else
                    {
                        <option value="SakMottatt">Sak Mottatt</option>
                    }
                    @if (Model.Status == SakStatus.UnderBehandling)
                    {
                        <option value="UnderBehandling" selected>Under Behandling</option>
                    }
                    else
                    {
                        <option value="UnderBehandling">Under Behandling</option>
                    }
                    @if (Model.Status == SakStatus.Ferdigstilt)
                    {
                        <option value="Ferdigstilt" selected>Ferdigstilt</option>
                    }
                    else
                    {
                        <option value="Ferdigstilt">Ferdigstilt</option>
                    }
                    @if (Model.Status == SakStatus.Avsluttet)
                    {
                        <option value="Avsluttet" selected>Avsluttet</option>
                    }
                    else
                    {
                        <option value="Avsluttet">Avsluttet</option>
                    }
                </select>
            </div>
            <div class="form-actions">
                <label for="arbeidStatus">Kontrol Status</label>
                <select id="arbeidStatus" name="arbeidStatus" class="form-control">
                    <option value="">Velg</option>
                    @if (Model.ArbeidStatus == ArbeidStatus.IkkeTilordnet)
                    {
                        <option value="IkkeTilordnet" selected>IkkeTilordnet</option>
                    }
                    else
                    {
                        <option value="IkkeTilordnet">IkkeTilordnet</option>
                    }
                    @if (Model.ArbeidStatus == ArbeidStatus.Tilordnet)
                    {
                        <option value="Tilordnet" selected>Tilordnet</option>
                    }
                    else
                    {
                        <option value="Tilordnet">Tilordnet</option>
                    }
                    @if (Model.ArbeidStatus == ArbeidStatus.KontrollAvlyst)
                    {
                        <option value="ArbeidStatus" selected>ArbeidStatus</option>
                    }
                    else
                    {
                        <option value="ArbeidStatus">ArbeidStatus</option>
                    }
                </select>
            </div>
            <div class="form-actions">

                <button type="button" class="btn btn-danger">Avvis</button>
                <button type="submit" class="btn btn-primary">Lagre</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        // GeoJSON verisini modelden alıyoruz
        var geoJsonData = @Html.Raw(Model.GeoJson);
        var selectedMapType = '@Model.SelectedMapType';

        // Define map layers
        var fargekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var gratonekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var turkart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var sjokart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        // Initialize map with selected layer
        var selectedLayer;
        switch (selectedMapType) {
            case 'gratonekart':
                selectedLayer = gratonekart;
                break;
            case 'turkart':
                selectedLayer = turkart;
                break;
            case 'sjokart':
                selectedLayer = sjokart;
                break;
            default:
                selectedLayer = fargekart;
        }

        var map = L.map('map').setView([58.1467, 7.9956], 15);
        selectedLayer.addTo(map);

        // Function to add coordinates to the table
        function addCoordinatesToTable(lat, lng) {
            var tableBody = document.getElementById("coordinatesTableBody");
            var rowCount = tableBody.rows.length + 1;
            var newRow = tableBody.insertRow();

            var cellIndex = newRow.insertCell(0);
            var cellLat = newRow.insertCell(1);
            var cellLng = newRow.insertCell(2);

            cellIndex.textContent = rowCount;
            cellLat.textContent = lat.toFixed(5);
            cellLng.textContent = lng.toFixed(5);
        }

        // Load GeoJSON data to the map and table
        if (geoJsonData && geoJsonData.features) {
            var layer = L.geoJSON(geoJsonData, {
                onEachFeature: function (feature, layer) {
                    if (feature.geometry.type === 'Point') {
                        var lat = feature.geometry.coordinates[1];
                        var lng = feature.geometry.coordinates[0];
                        layer.bindPopup("Koordinater: Br. " + lat + ", Lgr. " + lng).openPopup();
                        addCoordinatesToTable(lat, lng);
                    } else if (feature.geometry.type === 'Polygon') {
                        feature.geometry.coordinates[0].forEach(function (coord) {
                            var lat = coord[1];
                            var lng = coord[0];
                            L.marker([lat, lng]).addTo(map)
                                .bindPopup("Koordinater: Br. " + lat + ", Lgr. " + lng).openPopup();
                            addCoordinatesToTable(lat, lng);
                        });
                    } else if (feature.geometry.type === 'LineString') {
                        feature.geometry.coordinates.forEach(function (coord) {
                            var lat = coord[1];
                            var lng = coord[0];
                            L.marker([lat, lng]).addTo(map)
                                .bindPopup("Koordinater: Br. " + lat + ", Lgr. " + lng).openPopup();
                            addCoordinatesToTable(lat, lng);
                        });
                    }
                }
            }).addTo(map);
            map.fitBounds(layer.getBounds());
        } else {
            alert('Gyldige GeoJSON-data ble ikke funnet.');
        }
    </script>
}
