@model KartApplication.Models.AreaChange
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_GjestLayout.cshtml";
}

<br>
<center><h2>Velg Sted</h2></center>

<!-- Harita konteyneri -->
<div id="map" style="height: 400px; width: 100%; position: relative;">
    <!-- Arama kutusunu haritanın içinde yapacak kapsayıcı -->
    <div id="search-container" style="position: absolute; top: 10px; right: 0; margin-right:10px; z-index: 1000; width: 400px;">
        <div class="input-group">
            <input type="text" id="searchInput" name="address" class="form-control" placeholder="Enter full address" aria-label="Search Address" autocomplete="off" />
            <div class="input-group-append">
                <button type="button" class="btn-primary" id="searchAddressBtn">
                    <i class="bi bi-search black-icon"></i> <!-- Bootstrap büyüteç ikonu -->
                </button>
            </div>
        </div>
        <!-- Öneriler için dropdown menü -->
        <div id="suggestions" class="suggestions-dropdown" style="display: none;">
            <!-- Öneriler buraya eklenecek -->
        </div>
    </div>
</div>
<br />

<!-- Koordinatları tablo halinde göstermek için -->
<h3>Valgte Koordinater:</h3>
<table class="table table-bordered" id="coordinatesTable">
    <thead>
        <tr>
            <th>#</th>
           <th>Breddegrad</th>
            <th>Lengdegrad</th>
        </tr>
    </thead>
    <tbody id="coordinatesTableBody">
        <!-- Koordinatlar buraya eklenecek -->
    </tbody>
</table>

<!-- Form -->
<form asp-controller="Gjest" asp-action="Index" method="post" onsubmit="return validateForm()">
    <input type="hidden" id="geoJsonInput" name="geoJson" /> <!-- GeoJSON verisini saklamak için gizli alan -->
    <input type="hidden" id="addressInput" name="address" /> <!-- Adres verisini saklamak için gizli alan -->
    <input type="hidden" id="selectedMapType" name="selectedMapType" value="fargekart" /> <!-- Seçilen harita tipini saklamak için gizli alan -->
    <br />
        <button type="submit" class="btn btn-primary" style="background-color: #006aff; color: white; padding: 10px 20px; border-radius: 5px; border: none; cursor: pointer;">Neste</button>
</form>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />

    <style>
        /* Dropdown öneri menüsü stili */
        .suggestions-dropdown {
            position: absolute;
            background-color: white;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1001;
            width: 100%;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 0;
            margin-top: 5px;
            border-radius: 5px;
        }

        /* Harita kutuları stili */
        .map-thumbnails {
            position: absolute;
            bottom: 10px;
            right: 10px;
            display: flex;
            gap: 10px;
            z-index: 1000;
        }

        .map-thumbnail {
            width: 60px;
            height: 60px;
            border: 3px solid transparent;
            border-radius: 8px;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        .map-thumbnail.selected {
            border-color: orange;
        }

        /* Görsellerin küçük olmasını sağla */
        .map-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
        }

        .suggestion-item {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #ddd;
            color: black;
        }

        .suggestion-item:hover {
            background-color: #f0f0f0;
        }

        .suggestion-title {
            font-weight: bold;
            font-size: 14px;
        }

        .suggestion-address {
            font-size: 12px;
            color: black;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    </style>

     <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>

<script>
        // Haritayı başlat
        var map = L.map('map').setView([58.1467, 7.9956], 15); // Kristiansand, UiA konumu

        // Kartverket Fargekart (Renkli Harita)
        var fargekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        }).addTo(map); // Başlangıçta Fargekart yüklü

        // Kartverket Gråtonekart (Gri Tonlamalı Harita)
        var gratonekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

         // Kartverket Turkart (Yürüyüş Haritası)
        var turkart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        // Kartverket Sjøkart (Deniz Haritası)
        var sjokart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        // Başlangıç haritası olarak Fargekart'ı ekle
        var currentLayer = fargekart;
        var selectedMapType = 'fargekart'; // Varsayılan harita tipi

        // Sağ altta küçük kareler şeklinde harita seçenekleri ekle
        var thumbnailsContainer = document.createElement('div');
        thumbnailsContainer.classList.add('map-thumbnails');
        document.getElementById('map').appendChild(thumbnailsContainer);

        // Harita küçük resimlerini ekle
        var maps = [
            { id: 'fargekart', layer: fargekart, imageUrl: '@Url.Content("~/images/4.png")', title: 'Fargekart' },
            { id: 'gratonekart', layer: gratonekart, imageUrl: '@Url.Content("~/images/3.png")', title: 'Gråtonekart' },
            { id: 'turkart', layer: turkart, imageUrl: '@Url.Content("~/images/2.png")', title: 'Turkart' },
            { id: 'sjokart', layer: sjokart, imageUrl: '@Url.Content("~/images/1.png")', title: 'Sjøkart' }
        ];

        maps.forEach(function(mapInfo, index) {
            var thumbnailDiv = document.createElement('div');
            thumbnailDiv.classList.add('map-thumbnail');
            if (index === 0) {
                thumbnailDiv.classList.add('selected');
            }

            var img = document.createElement('img');
            img.src = mapInfo.imageUrl;
            img.alt = mapInfo.title;
            img.title = mapInfo.title; // Fare üzerine gelince harita adını göstermek için title kullanıyoruz
            thumbnailDiv.appendChild(img);
            thumbnailsContainer.appendChild(thumbnailDiv);

            // Tıklanınca haritayı değiştir
            thumbnailDiv.addEventListener('click', function() {
                if (currentLayer !== mapInfo.layer) {
                    map.removeLayer(currentLayer);
                    map.addLayer(mapInfo.layer);
                    currentLayer = mapInfo.layer;

                    // Update the selected map type value
                    selectedMapType = mapInfo.id;
                    document.getElementById('selectedMapType').value = selectedMapType;

                    // Seçili sınıfı güncelle
                    document.querySelectorAll('.map-thumbnail').forEach(function(thumb) {
                        thumb.classList.remove('selected');
                    });
                    thumbnailDiv.classList.add('selected');
                }
            });
        });

        // Çizim işlevselliği
        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        var drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems,
                edit: true,
                remove: true
            },
            draw: {
                polygon: true,
                polyline: true,
                rectangle: true,
                circle: false,
                circlemarker: false,
                marker: true
            }
        });
        map.addControl(drawControl);

        // GeoJSON'u güncelleyen bir fonksiyon
        function updateGeoJson() {
            var allLayers = [];
            drawnItems.eachLayer(function(layer) {
                var geoJson = layer.toGeoJSON();
                allLayers.push(geoJson);
            });

            var featureCollection = {
                "type": "FeatureCollection",
                "features": allLayers
            };

            document.getElementById('geoJsonInput').value = JSON.stringify(featureCollection);
        }

        // Adres input alanını güncelleyen fonksiyon
        function updateAddressInput(lat, lng) {
            var url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}&accept-language=no`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    var address = data.display_name ? data.display_name : "Address not found";
                    document.getElementById('searchInput').value = address;
                    document.getElementById('addressInput').value = address;
                })
                .catch(error => {
                    console.error('Error fetching address:', error);
                    document.getElementById('searchInput').value = "Error fetching address";
                });
        }

         // Koordinatları tabloya ekleyen/güncelleyen fonksiyon
        function updateCoordinatesTable(layer) {
            var tbody = document.getElementById('coordinatesTableBody');
            tbody.innerHTML = '';

            if (layer instanceof L.Marker) {
                var latLng = layer.getLatLng();
                var row = `<tr><td>1</td><td>${latLng.lat}</td><td>${latLng.lng}</td></tr>`;
                tbody.innerHTML = row;
            } else if (layer instanceof L.Polygon || layer instanceof L.Polyline || layer instanceof L.Rectangle) {
                var latlngs = layer.getLatLngs();
                var counter = 1;

                latlngs.forEach(function(latlngArray) {
                    if (Array.isArray(latlngArray)) {
                        latlngArray.forEach(function(latlng) {
                            var row = `<tr><td>${counter}</td><td>${latlng.lat}</td><td>${latlng.lng}</td></tr>`;
                            tbody.innerHTML += row;
                            counter++;
                        });
                    } else {
                        var row = `<tr><td>${counter}</td><td>${latlngArray.lat}</td><td>${latlngArray.lng}</td></tr>`;
                        tbody.innerHTML += row;
                        counter++;
                    }
                });
            }
        }

        // Çizim tamamlandığında yeni katmanı ekle
        map.on('draw:created', function(event) {
            var layer = event.layer;
            if (drawnItems.getLayers().length > 0) {
                drawnItems.clearLayers();
            }
            drawnItems.addLayer(layer);
            updateGeoJson();
            updateCoordinatesTable(layer);

            if (layer instanceof L.Marker) {
                var latLng = layer.getLatLng();
                updateAddressInput(latLng.lat, latLng.lng);
            }
        });

        map.on('draw:edited', function () {
            var layers = drawnItems.getLayers();
            if (layers.length > 0) {
                updateGeoJson();
                updateCoordinatesTable(layers[0]);
            }
        });

        // Adres arama işlevi
        function searchAddress() {
            var address = document.getElementById('searchInput').value;
            if (address) {
                var url = `https://nominatim.openstreetmap.org/search?format=json&limit=1&q=${encodeURIComponent(address)}`;

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length > 0) {
                            var lat = data[0].lat;
                            var lon = data[0].lon;

                            drawnItems.clearLayers();
                            var marker = L.marker([lat, lon]).addTo(drawnItems);
                            map.setView([lat, lon], 15);

                            updateGeoJson();
                            updateCoordinatesTable(marker);
                        } else {
                            alert('Address not found.');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching address:', error);
                        alert('Error fetching address.');
                    });
            } else {
                alert('Please enter an address.');
            }
        }

        // Adres önerileri gösterimi
        document.getElementById('searchInput').addEventListener('input', function() {
            var query = this.value;
            if (query.length > 0) {
                var url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&limit=5&q=${encodeURIComponent(query)}`;

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        var suggestions = document.getElementById('suggestions');
                        suggestions.innerHTML = '';
                        suggestions.style.display = 'block';

                        data.slice(0, 3).forEach(function(item) {
                            if (item.display_name.includes('Norveç')) {
                                var street = item.address.road || item.address.pedestrian || item.address.highway || '';
                                var house_number = item.address.house_number || '';
                                var city = item.address.city || item.address.village || '';
                                var county = item.address.county || '';
                                var country = "Norge";

                                var option = document.createElement('div');
                                option.classList.add('suggestion-item');
                                option.innerHTML = `
                                    <div class="suggestion-title">${street} ${house_number}</div>
                                    <div class="suggestion-address">${city}, ${county}, ${country}</div>
                                `;
                                option.addEventListener('click', function() {
                                    document.getElementById('searchInput').value = `${street} ${house_number}, ${city}, ${county}, ${country}`;
                                    suggestions.innerHTML = '';
                                    suggestions.style.display = 'none';

                                    var lat = item.lat;
                                    var lon = item.lon;
                                    drawnItems.clearLayers();
                                    var marker = L.marker([lat, lon]).addTo(drawnItems);
                                    map.setView([lat, lon], 15);
                                    updateGeoJson();
                                    updateCoordinatesTable(marker);
                                });
                                suggestions.appendChild(option);
                            }
                        });
                    })
                    .catch(error => console.error('Error fetching suggestions:', error));
            }
        });
