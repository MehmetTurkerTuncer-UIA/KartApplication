@model KartApplication.Models.SakModel
@* @model List<SakModel> *@
@{
    ViewData["Title"] = "Beskrivelse";
    Layout = "~/Views/Shared/_KontrollerenLayout.cshtml"; 
}

<!-- Sak Detayları Tablosu -->
<table class="tableForDetaljer">
    <thead>
        <tr>
            <th>Tarih</th>
            <th>Sak Status</th>
            <th>Referans Numarası</th>
            <th>Tilordnet Status</th>
            <th>Kontroll Status</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@Model.CreatedAt.ToShortDateString()</td>
            <td>@Model.Status</td>
            <td>@Model.Id</td>
            <td>@Model.ArbeidStatus</td>
            <td>@Model.KontrolStatus</td>

        </tr>
    </tbody>
</table>
<br>

@if (!string.IsNullOrEmpty(Model.Description))
{
    <div class="OppsummeringBox">
        <div class="OppsummeringContentTitle">
            <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Beskrivelse:
        </div>
        <p class="OppsummeringContent">@Model.Description</p>
    </div>
}

@if (!string.IsNullOrEmpty(Model.Address))
{
    <div class="OppsummeringBox">
        <div class="OppsummeringContentTitle">
            <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Adresse:
        </div>
        <p class="OppsummeringContent">@Model.Address</p>
    </div>
}

<!-- Harita konteyneri -->
<div class="OppsummeringBox">
    <div class="OppsummeringContentTitle">
        <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Kart:
    </div>
    <div id="map" style="height: 400px; width: 100%;"></div>
</div>

<!-- Koordinatlar tablosu -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>#</th>
            <th>Breddegrad</th>
            <th>Lengdegrad</th>
        </tr>
    </thead>
    <tbody id="coordinatesTableBody">
        <!-- Koordinatlar burada doldurulacak -->
    </tbody>
</table>



<!-- Yönetim Paneli -->
<div class="admin-panel">
    <div class="admin-card">

        @if (!string.IsNullOrEmpty(Model.KontrollerenDescription))
        {
            <div class="OppsummeringBox">
                <p>Kontrollerens Beskrivelse:</p>

                <p class="OppsummeringContent">@Model.KontrollerenDescription</p>
            </div>
        }

 <h2>Administer saken</h2>
              
        
        <form method="post" asp-action="UpdateStatus" asp-controller="Kontrolleren" asp-route-id="@Model.Id">
            
            <!-- Sol tarafta mesaj alanı (textarea) -->
            <div style="width: 48%;">
                <label for="KontrollerenDescription" style="color: white; display: block; margin-bottom: 10px;">Beskrivelse:</label>
                    <textarea id="KontrollerenDescription" name="KontrollerenDescription" class="form-control" required
          style="width: 100%; height: 200px; background-color: #333; color: white;
    border: 1px solid #ccc; border-radius: 5px; padding: 10px;"
                          onfocus="removePlaceholder()" onblur="addPlaceholder()"> Skriv en kommentar eller oppdater kommentaren ... </textarea>
            </div>


            <!-- Kontrol Status Seçimi -->
            <div class="form-group">
                <label for="kontrolStatus">Kontroll Status</label>
                <select id="kontrolStatus" name="kontrolStatus" class="form-control">
                    <option value="">Velg</option>
                    @if (Model.KontrolStatus == KontrolStatus.villKontrollere
                    )
                    {
                        <option value="villKontrollere" selected>villKontrollere</option>
                    }
                    else
                    {
                        <option value="villKontrollere">villKontrollere</option>
                    }
                    @if (Model.KontrolStatus == KontrolStatus.Godkjent)
                    {
                        <option value="Godkjent" selected>Godkjent</option>
                    }
                    else
                    {
                        <option value="Godkjent">Godkjent</option>
                    }
                    @if (Model.KontrolStatus == KontrolStatus.IkkeGodkjent)
                    {
                        <option value="IkkeGodkjent" selected>IkkeGodkjent</option>
                    }
                    else
                    {
                        <option value="IkkeGodkjent">IkkeGodkjent</option>
                    }
                </select>
            </div>
            
            <div class="form-actions">


            @*     <button type="button" class="btn btn-danger">Avvis</button> *@
                <button type="submit" class="btn btn-primary">Lagre</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        // GeoJSON verisini modelden alıyoruz
        var geoJsonData = @Html.Raw(Model.GeoJson);
        var selectedMapType = '@Model.SelectedMapType';

        // Define map layers
        var fargekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var gratonekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var turkart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var sjokart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        // Initialize map with selected layer
        var selectedLayer;
        switch (selectedMapType) {
            case 'gratonekart':
                selectedLayer = gratonekart;
                break;
            case 'turkart':
                selectedLayer = turkart;
                break;
            case 'sjokart':
                selectedLayer = sjokart;
                break;
            default:
                selectedLayer = fargekart;
        }

        var map = L.map('map').setView([58.1467, 7.9956], 15);
        selectedLayer.addTo(map);

        // Function to add coordinates to the table
        function addCoordinatesToTable(lat, lng) {
            var tableBody = document.getElementById("coordinatesTableBody");
            var rowCount = tableBody.rows.length + 1;
            var newRow = tableBody.insertRow();

            var cellIndex = newRow.insertCell(0);
            var cellLat = newRow.insertCell(1);
            var cellLng = newRow.insertCell(2);

            cellIndex.textContent = rowCount;
            cellLat.textContent = lat.toFixed(5);
            cellLng.textContent = lng.toFixed(5);
        }

        // Load GeoJSON data to the map and table
        if (geoJsonData && geoJsonData.features) {
            var layer = L.geoJSON(geoJsonData, {
                onEachFeature: function (feature, layer) {
                    if (feature.geometry.type === 'Point') {
                        var lat = feature.geometry.coordinates[1];
                        var lng = feature.geometry.coordinates[0];
                        layer.bindPopup("Koordinater: Br. " + lat + ", Lgr. " + lng).openPopup();
                        addCoordinatesToTable(lat, lng);
                    } else if (feature.geometry.type === 'Polygon') {
                        feature.geometry.coordinates[0].forEach(function (coord) {
                            var lat = coord[1];
                            var lng = coord[0];
                            L.marker([lat, lng]).addTo(map)
                                .bindPopup("Koordinater: Br. " + lat + ", Lgr. " + lng).openPopup();
                            addCoordinatesToTable(lat, lng);
                        });
                    } else if (feature.geometry.type === 'LineString') {
                        feature.geometry.coordinates.forEach(function (coord) {
                            var lat = coord[1];
                            var lng = coord[0];
                            L.marker([lat, lng]).addTo(map)
                                .bindPopup("Koordinater: Br. " + lat + ", Lgr. " + lng).openPopup();
                            addCoordinatesToTable(lat, lng);
                        });
                    }
                }
            }).addTo(map);
            map.fitBounds(layer.getBounds());
        } else {
            alert('Gyldige GeoJSON-data ble ikke funnet.');
        }
    </script>
}
