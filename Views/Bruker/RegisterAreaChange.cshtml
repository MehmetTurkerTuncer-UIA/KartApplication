@{
    ViewData["Title"] = "Register Change";
}


<style>
    header {
        display: none;
    }
</style>

<!-- Özel StilDosyası -->
<link rel="stylesheet" href="~/css/RegisterAreaChange.css" />

<div class="container-fluid">
<div class="header">
    <div class="headerlogo">            
                <img src="https://img.pikbest.com/origin/09/34/11/384pIkbEsT7ki.png!sw800" alt="Logo"  width="300" height="150">
</div>

<div class="headerhoyre">            
            <h4>Velkommen Ahmet Kirac ny</h4>
             <p>Saksbehandler</p>
</div>
               
            </div>
            <div class="container-ned">
                <div class="row">
        <!-- Sol Menü -->
       
    
        <div class="side-menu">
           
            <div class="mt-4">
                <button class="btn btn-success w-100 mb-3">Aktive Saker</button>
                <button class="btn btn-success w-100 mb-3">Ferdige Saker</button>
            </div>

            <div class="mt-2">
                <button class="btn btn-success w-100 mb-3">Profil</button>
                <button class="btn btn-warning w-100">Logg ut</button>
            </div>
        </div>

        <!-- İçerik Alanı -->
        <div class="content-areaa">
            

       

<h2>Register Change</h2>

<!-- Harita konteyneri -->
<div id="map" style="height: 400px; width: 100%;"></div>
<br />

<!-- Form -->
<form asp-action="RegisterAreaChange" method="post" onsubmit="return validateForm()">
    <input type="hidden" id="geoJsonInput" name="geoJson" /> <!-- GeoJSON verisini saklamak için gizli alan -->
    <div>
        <label for="latitude">Latitude: </label>
        <input type="text" id="latitude" name="latitude" class="form-control" readonly />
        <span id="latitudeError" class="text-danger"></span> <!-- Hata mesajı alanı -->
    </div>
    <div>
        <label for="longitude">Longitude: </label>
        <input type="text" id="longitude" name="longitude" class="form-control" readonly />
        <span id="longitudeError" class="text-danger"></span> <!-- Hata mesajı alanı -->
    </div>
    <div>
        <label for="address">Adresse: </label>
        <input type="text" id="address" name="address" class="form-control" readonly />
        <span id="addressError" class="text-danger"></span> <!-- Hata mesajı alanı -->
    </div>
    <br />
<div style="display: flex; justify-content: flex-end;">
    <button type="submit" class="btn btn-primary">Neste > </button>
</div></form>

                     
        </div>
    </div>
</div></div>

@section Scripts {
    <!-- Leaflet ve Leaflet.Draw CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />

    <!-- Leaflet ve Leaflet.Draw JavaScript -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>

    <script>
        // Formvalidering på klienten
        function validateForm() {
            var isValid = true;
            
            // Form alanlarını al
            var latitude = document.getElementById("latitude").value;
            var longitude = document.getElementById("longitude").value;
            var address = document.getElementById("address").value;

            // Hata mesajı alanlarını al
            var latitudeError = document.getElementById("latitudeError");
            var longitudeError = document.getElementById("longitudeError");
            var addressError = document.getElementById("addressError");

            // Hata mesajlarını sıfırla
            latitudeError.textContent = "";
            longitudeError.textContent = "";
            addressError.textContent = "";

            // Latitude kontrolü
            if (!latitude) {
                latitudeError.textContent = "Dette feltet er obligatorisk."; // Norveççe
                isValid = false;
            }

            // Longitude kontrolü
            if (!longitude) {
                longitudeError.textContent = "Dette feltet er obligatorisk."; // Norveççe
                isValid = false;
            }

            // Address kontrolü
            if (!address) {
                addressError.textContent = "Dette feltet er obligatorisk."; // Norveççe
                isValid = false;
            }

            // Geçerli değilse formu göndermeyi engelle
            return isValid;
        }

        // Leaflet-kart opprettelse
        // Haritayı başlat, başlangıç konumunu Kristiansand, UiA olarak ayarla
var map = L.map('map').setView([58.1467, 7.9956], 15); // Kristiansand, UiA koordinatları

        // OpenStreetMap-lag
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Tegningskontroll
        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        var drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems
            },
            draw: {
                polygon: true,
                polyline: true,
                rectangle: true,
                circle: false,
                marker: true // Marker aktiv
            }
        });
        map.addControl(drawControl);

        // Funksjon for å få adresse ved klikk eller tegning
        function getAddress(lat, lng) {
            var url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Nettverksresponsen var ikke ok");
                    }
                    return response.json();
                })
                .then(data => {
                    var address = data.display_name ? data.display_name : "Adresse ikke funnet";
                    document.getElementById('address').value = address;
                })
                .catch(error => {
                    console.error("Geokodingsfeil:", error);
                    document.getElementById('address').value = "Adresse ikke tilgjengelig";
                });
        }

        // Funksjon for å oppdatere skjemaet med lat, lng og adresse
        function updateForm(lat, lng) {
            document.getElementById('latitude').value = lat;
            document.getElementById('longitude').value = lng;
            getAddress(lat, lng);
        }

        // Kart klikkhendelse for å vise lat, lng og adresse
        map.on('click', function (e) {
            var lat = e.latlng.lat;
            var lng = e.latlng.lng;
            updateForm(lat, lng);
        });

        // Tegning fullført hendelse
        map.on('draw:created', function (event) {
            var layer = event.layer;
            drawnItems.addLayer(layer); // Legg til laget

            // GeoJSON-data i skjult input
            var geoJsonData = layer.toGeoJSON();
            document.getElementById('geoJsonInput').value = JSON.stringify(geoJsonData);

            // Få midtpunktet og oppdater skjemaet
            var lat, lng;
            if (layer instanceof L.Marker) {
                var latlng = layer.getLatLng();
                lat = latlng.lat;
                lng = latlng.lng;
            } else if (layer instanceof L.Polygon || layer instanceof L.Polyline || layer instanceof L.Rectangle) {
                var bounds = layer.getBounds();
                var center = bounds.getCenter();
                lat = center.lat;
                lng = center.lng;
            }

            updateForm(lat, lng);
        });
    </script>
}