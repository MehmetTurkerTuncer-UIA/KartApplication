@model KartApplication.Models.AreaChange
@{
    ViewData["Title"] = "Beskrivelse";
    Layout = "~/Views/Shared/_BrukerLayout.cshtml";
}

<h2>Beskrivelse</h2>

<!-- Açıklama formu -->
<form asp-action="Beskrivelse" method="post">
    <div style="display: flex; justify-content: space-between; align-items: flex-start;">
        <!-- Sol tarafta mesaj alanı (textarea) -->
        <div style="width: 48%;">
            <label for="description" style="color: white; display: block; margin-bottom: 10px;">Beskrivelse:</label>
            <textarea id="description" name="description" class="form-control" required style="width: 100%; height: 200px; background-color: #333; color: white; border: 1px solid #ccc; border-radius: 5px; padding: 10px;"></textarea>
        </div>

        <!-- Sağ tarafta harita ve başlık -->
        <div style="width: 48%;">
            <!-- Harita başlığı -->
            <label for="map" style="color: white; display: block; margin-bottom: 10px;">Map View:</label>
            <div id="map" style="height: 400px; width: 100%; background-color: lightgray;"></div>

            <!-- Adres bilgisi varsa göster (haritanın altında) -->
            @if (!string.IsNullOrEmpty(Model.Address))
            {
                <div style="margin-top: 15px;">
                    <p><strong>Adress:</strong> @Model.Address</p>
                </div>
            }
        </div>
    </div>

    <br />

    <!-- Alt tarafta butonlar aynı satırda -->
    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 20px;">
        <!-- Geri butonu solda -->
        <button type="button" class="btn" style="background-color: gray; color: white; padding: 10px 20px; border-radius: 5px; cursor: pointer;" onclick="window.location.href='@Url.Action("Index", "Bruker")'">Tilbake</button>
        <!-- İleri (Save and Continue) butonu sağda -->
        <button type="submit" class="btn btn-primary" style="background-color: #006aff; color: white; padding: 10px 20px; border-radius: 5px; border: none; cursor: pointer;">Neste</button>
    </div>
</form>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        // GeoJSON verisini modelden alıyoruz
        var geoJsonData = @Html.Raw(Model.GeoJson);
        var selectedMapType = '@Model.SelectedMapType'; // Seçilen harita tipi (fargekart, gratonekart, turkart, sjokart)

        // Harita katmanlarını tanımla
        var fargekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var gratonekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var turkart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var sjokart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        // Seçilen harita katmanına göre haritayı başlat
        var selectedLayer;
        switch (selectedMapType) {
            case 'gratonekart':
                selectedLayer = gratonekart;
                break;
            case 'turkart':
                selectedLayer = turkart;
                break;
            case 'sjokart':
                selectedLayer = sjokart;
                break;
            default:
                selectedLayer = fargekart;
        }

        // Haritayı başlat
        var map = L.map('map').setView([58.1467, 7.9956], 15);

        // Seçilen harita katmanını ekle
        selectedLayer.addTo(map);

        // GeoJSON verisini haritaya ekle
        if (geoJsonData && geoJsonData.features) {
            var layer = L.geoJSON(geoJsonData, {
                onEachFeature: function (feature, layer) {
                    // Eğer özellik bir Point ise (işaretleyici)
                    if (feature.geometry.type === 'Point') {
                        var lat = feature.geometry.coordinates[1];
                        var lng = feature.geometry.coordinates[0];
                        layer.bindPopup("Koordinatlar: Lat " + lat + ", Lng " + lng).openPopup();
                    }
                    // Eğer Polygon ise
                    else if (feature.geometry.type === 'Polygon') {
                        feature.geometry.coordinates[0].forEach(function (coord) {
                            var lat = coord[1];
                            var lng = coord[0];
                            L.marker([lat, lng]).addTo(map)
                                .bindPopup("Koordinatlar: Lat " + lat + ", Lng " + lng).openPopup();
                        });
                    }
                    // Eğer Polyline (çizgi) ise
                    else if (feature.geometry.type === 'LineString') {
                        feature.geometry.coordinates.forEach(function (coord) {
                            var lat = coord[1];
                            var lng = coord[0];
                            L.marker([lat, lng]).addTo(map)
                                .bindPopup("Koordinatlar: Lat " + lat + ", Lng " + lng).openPopup();
                        });
                    }
                }
            }).addTo(map);

            // Harita görünümünü katmanlara göre ayarla
            map.fitBounds(layer.getBounds());

        } else {
            // GeoJSON verisi yoksa bir uyarı mesajı göster
            alert('Geçerli GeoJSON verisi bulunamadı.');
        }
    </script>
}
