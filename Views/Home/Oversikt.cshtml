@model KartApplication.Models.SakModel
@{
    ViewData["Title"] = "Oversikt";
    Layout = "~/Views/Shared/_BrukerLayout.cshtml"; 
}

<br>
<center><h2>Oversikt</h2></center>

@if (!string.IsNullOrEmpty(Model.Description))
{
    <div class="OppsummeringBox">    
        <div class="OppsummeringContentTitle">    <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Beskrivelse: </div>
        <p class="OppsummeringContent"> @Model.Description</p> 
    </div>
}

@if (!string.IsNullOrEmpty(Model.Address))
{
    <div class="OppsummeringBox">    
        <div class="OppsummeringContentTitle"> <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Adresse: </div>
        <p class="OppsummeringContent"> @Model.Address</p> 
    </div>
}

<!-- Kartbeholder -->
<div class="OppsummeringBox">    
    <div class="OppsummeringContentTitle"> <img src="~/images/check-mark.png" alt="Checkbox" class="checkboxImage"> Kart: </div>
    <div id="map" style="height: 400px; width: 100%;"></div>
</div>

<!-- Koordinater tabell -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>#</th>
            <th>Breddegrad</th>
            <th>Lengdegrad</th>
        </tr>
    </thead>
    <tbody id="coordinatesTableBody">
        <!-- Koordinater vil bli fylt inn her -->
    </tbody>
</table>

<!-- Send inn knapp -->
<form asp-controller="Home" asp-action="SubmitOversikt" method="post">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 20px;">
        <input type="hidden" asp-for="Id" />
        <button type="button" class="btn" style="background-color: gray; color: white; padding: 10px 20px; border-radius: 5px; cursor: pointer;" onclick="window.location.href='@Url.Action("Beskrivelse", "Bruker")'">Tilbake</button> 
        <button type="submit" class="btn btn-primary" style="background-color: #4CAF50; color: white; padding: 10px 20px; border-radius: 5px; border: none; cursor: pointer;">Send inn</button>
    </div>
</form>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        // Henter GeoJSON-data fra modellen
        var geoJsonData = @Html.Raw(Model.GeoJson);
        var selectedMapType = '@Model.SelectedMapType'; // Valgt karttype

        // Definer kartlag
        var fargekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var gratonekart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var turkart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        var sjokart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://kartverket.no/">Kartverket</a>'
        });

        // Bestem valgt kartlag
        var selectedLayer;
        switch (selectedMapType) {
            case 'gratonekart':
                selectedLayer = gratonekart;
                break;
            case 'turkart':
                selectedLayer = turkart;
                break;
            case 'sjokart':
                selectedLayer = sjokart;
                break;
            default:
                selectedLayer = fargekart;
        }

        // Initialiser kartet og legg til valgt kartlag
        var map = L.map('map').setView([58.1467, 7.9956], 15);
        selectedLayer.addTo(map);

        // Legg til koordinater i tabellen
        var tbody = document.getElementById('coordinatesTableBody');
        var counter = 1;

        // Legg GeoJSON-data til kartet og konfigurer pop-ups
        if (geoJsonData && geoJsonData.features) {
            var layer = L.geoJSON(geoJsonData, {
                onEachFeature: function (feature, layer) {
                    if (feature.geometry.type === 'Point') {
                        var lat = feature.geometry.coordinates[1];
                        var lng = feature.geometry.coordinates[0];

                        // Vis koordinater i tabellen
                        var row = `<tr><td>${counter}</td><td>${lat}</td><td>${lng}</td></tr>`;
                        tbody.innerHTML += row;
                        counter++;

                        // Vis koordinatinformasjon med pop-up
                        layer.bindPopup("Koordinater: Lat " + lat + ", Lng " + lng).openPopup();
                    } 
                    else if (feature.geometry.type === 'Polygon') {
                        var coords = feature.geometry.coordinates[0]; // Første ring
                        coords.forEach(function(coord, index) {
                            var lat = coord[1];
                            var lng = coord[0];

                            // Vis koordinater i tabellen
                            var row = `<tr><td>${counter}</td><td>${lat}</td><td>${lng}</td></tr>`;
                            tbody.innerHTML += row;
                            counter++;

                            // Legg til pop-up for hvert hjørnepunkt
                            var marker = L.marker([lat, lng]).addTo(map);
                            marker.bindPopup("Koordinater: Lat " + lat + ", Lng " + lng);
                        });
                    } 
                    else if (feature.geometry.type === 'LineString') {
                        feature.geometry.coordinates.forEach(function(coord, index) {
                            var lat = coord[1];
                            var lng = coord[0];

                            // Vis koordinater i tabellen
                            var row = `<tr><td>${counter}</td><td>${lat}</td><td>${lng}</td></tr>`;
                            tbody.innerHTML += row;
                            counter++;

                            // Legg til pop-up for hvert punkt
                            var marker = L.marker([lat, lng]).addTo(map);
                            marker.bindPopup("Koordinater: Lat " + lat + ", Lng " + lng);
                        });
                    }
                }
            }).addTo(map);

            // Juster kartvisningen basert på lagene
            map.fitBounds(layer.getBounds());
        } else {
            // Vis en advarsel dersom GeoJSON-data mangler
            alert('Gyldige GeoJSON-data ble ikke funnet.');
        }
    </script>
}
